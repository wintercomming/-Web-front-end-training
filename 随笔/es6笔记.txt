let命令
let是EcmaScript6新推出的变量声明格式，与传统的var声明不同，let声明只在某一个代码块里面可以使用，而var只有全局作用域和函数作用域两种。
特点：
1.不存在变量提升
EcmaScript5中，在运行var声明这一句代码之前，会先把此变量提升到其所属作用域最前端，并赋值为undefined，所以在var之前调用此变量的语句都会得到undefined的值而不会报错。  但是新推出的let声明与众不同，为了规范代码，防止由于赋值undefined所导致的错误，let并不会变量提升，在let之前调用此变量的语句会报错ReferenceError。
2.暂时性死区
即上面所写的，在执行到let声明的语句之前，会形成一块死区，这一块死区里面无法调用其声明的变量，但是有一些比较隐蔽的死区，例如function括号里面的区域以及赋值本身的操作
3不允许重新声明
let声明形式不允许在同一个作用域内重复声明同一个变量，包括var和let同时声明。
4.块级作用域
在es6之前不存在块级作用域的概念，for循环和try-catch语句中的var所声明的变量在外面也可以使用，但是当let出现后，实际上就有了块级作用域的概念了
5.块级作用域中的函数声明
在es6之前，无法在块级作用域中实现函数声明，
es6中块级作用域中的函数声明与es5中的var一样，会提升到其作用域的最前端进行执行
若确实需要写函数进块级作用域内，必须使用函数表达式。




const命令
const命令与let大致相同，不同的在于let命令声明的是一个变量而const命令声明的是一个常量，如果试图改变常量的值，系统会直接报错
需要注意的是，无法改变const命令的值其本质是无法改变其定义的常量所指向的内存



变量的解构赋值

1.在es6之前，为变量赋值只能直接给定值；
而发布了es6之后，变量可以解构化赋值了
简单来说，就是从数组和对象里面提取值出来再赋值给某个变量；